services:

  # FastAPI application
  fastapi:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    networks:
      - backend
    restart: always
    depends_on:
      pgvector:
        condition: service_healthy
    env_file:
      - ./env/.env.app

  # Nginx Service 
  nginx:
    image: nginx:stable-alpine3.20-perl
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - fastapi
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - backend
    restart: always

  # PostgreSQL Service (pgvector)
  pgvector:
    image: pgvector/pgvector:latest
    container_name: pgvector
    ports: 
      - "5432:5432"
    volumes: 
      - 'pgvector:/var/lib/postgresql/data'
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always

    healthcheck:
      test: ["executable", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  # Qdrant (VectorDB)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - 'qdrant_data:/qdrant/storage'
    networks:
      - backend
    restart: always
  
  # prometheus Monitoring 
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard 
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus
    networks:
      - backend
    restart: always
  
  # Node Exporter for system metrics 
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - backend
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro

  # PostgreSQL Exporter for Postgres metrics 
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    ports:
      - "9187:9187"
    env_file:
      - ./env/.env.postgres_exporter
    depends_on:
      - pgvector
    networks:
      - backend
    restart: always

  networks:
    backend:
      driver: bridge

  volumes:
    pgvector:
    qdrant_data:
    prometheus_data:
    grafana_data: